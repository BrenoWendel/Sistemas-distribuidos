import threading

class Racer(threading.Thread):
    def __init__(self, racer_number):
        threading.Thread.__init__(self)
        self.racer_number = racer_number

    def run(self):
        while True:
            print(f"Racer {self.racer_number} - imprimindo")

class Race:
    def __init__(self):
        self.racers = []

    def create_racers(self):
        for i in range(1, 11):
            racer = Racer(i)
            self.racers.append(racer)

    def start_race(self):
        for racer in self.racers:
            racer.start()

if __name__ == "__main__":
    race = Race()
    race.create_racers()
    race.start_race()

# a)	Como se deu o comportamento dos prints? 
# Os prints aconteceram de forma totalmente aleatória, visto que as threads executaram simultaneamente disputando constantemente qual escreve primeiro.
 
# b)	Adiciona um tempo de espera (usando o método sleep) nos Racers, o que houve com comportamento do sistema?  
#Inicialmente ele imprime 10 linhas dos Racers de 1 a 10 respectivamente e depois passa a imprimir de forma aleatória em intervalos de 1 segundo (tempo determinado para o sleep), conseguindo realizar as vezes 2 prints, outras apenas 1 nesse meio tempo.

# c)	Utilize o método setPriority (java) para definir as condições de corrida. Houve mudanças na execução? Se sim, descreva-as. 
# fizemos em python
