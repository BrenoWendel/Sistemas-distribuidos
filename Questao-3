import threading

class Racer(threading.Thread):
    def __init__(self, racer_number):
        threading.Thread.__init__(self)
        self.racer_number = racer_number

    def run(self):
        for i in range(1000):
            print(f"Racer {self.racer_number} - imprimindo")

class Race:
    def __init__(self):
        self.racers = []

    def create_racers(self):
        for i in range(1, 11):
            racer = Racer(i)
            self.racers.append(racer)

    def start_race(self):
        racers_impares = []
        racers_pares = []

        for racer in self.racers:
            if racer.racer_number % 2 == 0:
                racers_pares.append(racer)
            else:
                racers_impares.append(racer)

        for racer in racers_impares:
            racer.start()

        for racer in racers_impares:
            racer.join()

        for racer in racers_pares:
            racer.start()

        for racer in racers_pares:
            racer.join()

if __name__ == "__main__":
    race = Race()
    race.create_racers()
    race.start_race()

# printa 1000 Racers de forma aleatória, porém todos pares. entretanto, ao adicionar uma pequena pausa (sleep) dentro do loop do método run() da classe Racer, ele passou a imprimir apenas numeros impares.
